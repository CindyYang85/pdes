This library depends on libtool, libltdl (which is part of libtool), and pccts
(1.33 - not the newer antlr stuff.)  If you running from CVS also read the
section about that.  Otherwise move on to the next part.

Libtool is part of the gnu project and can be found at:
ftp://ftp.gnu.org/gnu/libtool

PCCTS 1.33 is maintained by Tom Moog and can be found at:
http://www.polhode.com/pccts.html

Running from CVS
----------------
If you're running from CVS you need to build the build system.  To do this
you'll need automake 1.7 and autoconf 2.57.  Those are also in:
ftp://ftp.gnu.org/gnu/{automake,autoconf}

The quickest way to build the build system is "autoreconf -i".

Running configure
-----------------
The configure script attempts to look in advance for all of the build problems
that might pop up.  You can tell it where to find pccts binaries using
"--with-pccts", and headers with "--with-pccts-headers".  (There are also some
.cc files that have to be in that directory - a proper installation of pccts
will have them.)

If you don't specify --with-pccts=/some/path/somewhere it will default to
/usr/include/pccts and look for a header there.

You should also specify an installation prefix with --prefix.  This tells "make
install" where to stick the resulting headers and libraries.

A typical configure run might look like:

CXXFLAGS="-O2 -Wall" ./configure --prefix=/home/me

If your pccts headers are somewhere else then maybe it would look like:

CXXFLAGS="-O2 -Wall" ./configure --prefix=/home/me --with-pccts-headers=/home/pccts

Building
--------
After you have successfully configured the build system, "make" should build
utils. 

Testing
-------
Now that it's built, you can go into the test directory and see if
"./regressionTest" reports any problems. 

Installing
----------
When you're finished, you should do a "make install" and install the software to
where you specified with --prefix.  That is, in our example above "make install"
will make subdirs (if they don't exist) called "/home/me/lib" and
"/home/me/include" which will now contain libutils.so and the header files
needed to use utils, respectively.

If you use a non-standard directory like "/home/me" then you will need to define
LD_LIBRARY_PATH in your shell's startup files so that ld.so can find libutils.so
when it wants to use it.  On some platforms "man ld.so" will tell you more about
this.  If you don't do this the problems won't become apparent until you try to
run an application linked against libutils.so, at which point you'll get an
error message.
